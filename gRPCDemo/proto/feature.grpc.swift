//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: feature.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Routeguide_RouteGuideClient`, then call methods of this protocol to make API calls.
public protocol Routeguide_RouteGuideClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Routeguide_RouteGuideClientInterceptorFactoryProtocol? { get }

  func getFeature(
    _ request: Routeguide_Point,
    callOptions: CallOptions?
  ) -> UnaryCall<Routeguide_Point, Routeguide_Feature>

  func listFeatures(
    _ request: Routeguide_Rectangle,
    callOptions: CallOptions?,
    handler: @escaping (Routeguide_Feature) -> Void
  ) -> ServerStreamingCall<Routeguide_Rectangle, Routeguide_Feature>

  func recordRoute(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Routeguide_Point, Routeguide_RouteSummary>

  func routeChat(
    callOptions: CallOptions?,
    handler: @escaping (Routeguide_RouteNote) -> Void
  ) -> BidirectionalStreamingCall<Routeguide_RouteNote, Routeguide_RouteNote>
}

extension Routeguide_RouteGuideClientProtocol {
  public var serviceName: String {
    return "routeguide.RouteGuide"
  }

  /// 一个简单的RPC。
  ///
  /// 在一个给定的位置上获得特征。
  ///
  /// 如果在给定的位置上没有任何特征，则返回一个空名称的特征。
  /// 如果在给定的位置上没有特征，则返回一个空名称的特征。
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFeature.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFeature(
    _ request: Routeguide_Point,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routeguide_Point, Routeguide_Feature> {
    return self.makeUnaryCall(
      path: "/routeguide.RouteGuide/GetFeature",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeatureInterceptors() ?? []
    )
  }

  /// 一个服务器到客户的流式RPC。
  ///
  /// 获取给定矩形内的可用特征。 结果是
  /// 而不是一次性返回（例如，在一个带有重复字段的响应消息中）。
  /// 重复的字段），因为矩形可能覆盖很大的区域并包含大量的特征。
  /// 巨大数量的特征。
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFeatures.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listFeatures(
    _ request: Routeguide_Rectangle,
    callOptions: CallOptions? = nil,
    handler: @escaping (Routeguide_Feature) -> Void
  ) -> ServerStreamingCall<Routeguide_Rectangle, Routeguide_Feature> {
    return self.makeServerStreamingCall(
      path: "/routeguide.RouteGuide/ListFeatures",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFeaturesInterceptors() ?? [],
      handler: handler
    )
  }

  /// 一个客户端到服务器的流式RPC。
  ///
  /// 接受一个正在穿越的路由上的点流，在穿越完成后返回一个
  /// 遍历完成后返回RouteSummary。
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func recordRoute(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Routeguide_Point, Routeguide_RouteSummary> {
    return self.makeClientStreamingCall(
      path: "/routeguide.RouteGuide/RecordRoute",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordRouteInterceptors() ?? []
    )
  }

  /// 一个双向的流媒体RPC。
  ///
  /// 接受在路由被遍历时发送的RouteNotes流。
  /// 在接收其他RouteNotes（例如来自其他用户的）时。
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func routeChat(
    callOptions: CallOptions? = nil,
    handler: @escaping (Routeguide_RouteNote) -> Void
  ) -> BidirectionalStreamingCall<Routeguide_RouteNote, Routeguide_RouteNote> {
    return self.makeBidirectionalStreamingCall(
      path: "/routeguide.RouteGuide/RouteChat",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteChatInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Routeguide_RouteGuideClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getFeature'.
  func makeGetFeatureInterceptors() -> [ClientInterceptor<Routeguide_Point, Routeguide_Feature>]

  /// - Returns: Interceptors to use when invoking 'listFeatures'.
  func makeListFeaturesInterceptors() -> [ClientInterceptor<Routeguide_Rectangle, Routeguide_Feature>]

  /// - Returns: Interceptors to use when invoking 'recordRoute'.
  func makeRecordRouteInterceptors() -> [ClientInterceptor<Routeguide_Point, Routeguide_RouteSummary>]

  /// - Returns: Interceptors to use when invoking 'routeChat'.
  func makeRouteChatInterceptors() -> [ClientInterceptor<Routeguide_RouteNote, Routeguide_RouteNote>]
}

public final class Routeguide_RouteGuideClient: Routeguide_RouteGuideClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Routeguide_RouteGuideClientInterceptorFactoryProtocol?

  /// Creates a client for the routeguide.RouteGuide service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Routeguide_RouteGuideClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Routeguide_RouteGuideProvider: CallHandlerProvider {
  var interceptors: Routeguide_RouteGuideServerInterceptorFactoryProtocol? { get }

  /// 一个简单的RPC。
  ///
  /// 在一个给定的位置上获得特征。
  ///
  /// 如果在给定的位置上没有任何特征，则返回一个空名称的特征。
  /// 如果在给定的位置上没有特征，则返回一个空名称的特征。
  func getFeature(request: Routeguide_Point, context: StatusOnlyCallContext) -> EventLoopFuture<Routeguide_Feature>

  /// 一个服务器到客户的流式RPC。
  ///
  /// 获取给定矩形内的可用特征。 结果是
  /// 而不是一次性返回（例如，在一个带有重复字段的响应消息中）。
  /// 重复的字段），因为矩形可能覆盖很大的区域并包含大量的特征。
  /// 巨大数量的特征。
  func listFeatures(request: Routeguide_Rectangle, context: StreamingResponseCallContext<Routeguide_Feature>) -> EventLoopFuture<GRPCStatus>

  /// 一个客户端到服务器的流式RPC。
  ///
  /// 接受一个正在穿越的路由上的点流，在穿越完成后返回一个
  /// 遍历完成后返回RouteSummary。
  func recordRoute(context: UnaryResponseCallContext<Routeguide_RouteSummary>) -> EventLoopFuture<(StreamEvent<Routeguide_Point>) -> Void>

  /// 一个双向的流媒体RPC。
  ///
  /// 接受在路由被遍历时发送的RouteNotes流。
  /// 在接收其他RouteNotes（例如来自其他用户的）时。
  func routeChat(context: StreamingResponseCallContext<Routeguide_RouteNote>) -> EventLoopFuture<(StreamEvent<Routeguide_RouteNote>) -> Void>
}

extension Routeguide_RouteGuideProvider {
  public var serviceName: Substring { return "routeguide.RouteGuide" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetFeature":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Routeguide_Point>(),
        responseSerializer: ProtobufSerializer<Routeguide_Feature>(),
        interceptors: self.interceptors?.makeGetFeatureInterceptors() ?? [],
        userFunction: self.getFeature(request:context:)
      )

    case "ListFeatures":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Routeguide_Rectangle>(),
        responseSerializer: ProtobufSerializer<Routeguide_Feature>(),
        interceptors: self.interceptors?.makeListFeaturesInterceptors() ?? [],
        userFunction: self.listFeatures(request:context:)
      )

    case "RecordRoute":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Routeguide_Point>(),
        responseSerializer: ProtobufSerializer<Routeguide_RouteSummary>(),
        interceptors: self.interceptors?.makeRecordRouteInterceptors() ?? [],
        observerFactory: self.recordRoute(context:)
      )

    case "RouteChat":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Routeguide_RouteNote>(),
        responseSerializer: ProtobufSerializer<Routeguide_RouteNote>(),
        interceptors: self.interceptors?.makeRouteChatInterceptors() ?? [],
        observerFactory: self.routeChat(context:)
      )

    default:
      return nil
    }
  }
}

public protocol Routeguide_RouteGuideServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getFeature'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFeatureInterceptors() -> [ServerInterceptor<Routeguide_Point, Routeguide_Feature>]

  /// - Returns: Interceptors to use when handling 'listFeatures'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFeaturesInterceptors() -> [ServerInterceptor<Routeguide_Rectangle, Routeguide_Feature>]

  /// - Returns: Interceptors to use when handling 'recordRoute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordRouteInterceptors() -> [ServerInterceptor<Routeguide_Point, Routeguide_RouteSummary>]

  /// - Returns: Interceptors to use when handling 'routeChat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRouteChatInterceptors() -> [ServerInterceptor<Routeguide_RouteNote, Routeguide_RouteNote>]
}
