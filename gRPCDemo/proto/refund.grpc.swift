//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: refund.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Order_V1_RefundServiceClient`, then call methods of this protocol to make API calls.
public protocol Order_V1_RefundServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Order_V1_RefundServiceClientInterceptorFactoryProtocol? { get }

  func createFull(
    _ request: Order_V1_FullRefundApiCreate,
    callOptions: CallOptions?
  ) -> UnaryCall<Order_V1_FullRefundApiCreate, Order_V1_Refund>

  func createPart(
    _ request: Order_V1_PartRefundApiCreate,
    callOptions: CallOptions?
  ) -> UnaryCall<Order_V1_PartRefundApiCreate, Order_V1_Refund>

  func list(
    _ request: Order_V1_RefundApiList,
    callOptions: CallOptions?
  ) -> UnaryCall<Order_V1_RefundApiList, Order_V1_RefundList>

  func createAudit(
    _ request: Order_V1_AuditApiCreate,
    callOptions: CallOptions?
  ) -> UnaryCall<Order_V1_AuditApiCreate, Order_V1_Audit>

  func reasonList(
    _ request: Order_V1_ReasonApi,
    callOptions: CallOptions?
  ) -> UnaryCall<Order_V1_ReasonApi, Order_V1_Reasons>
}

extension Order_V1_RefundServiceClientProtocol {
  public var serviceName: String {
    return "order.v1.RefundService"
  }

  /// 全额退款
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFull.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFull(
    _ request: Order_V1_FullRefundApiCreate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Order_V1_FullRefundApiCreate, Order_V1_Refund> {
    return self.makeUnaryCall(
      path: "/order.v1.RefundService/CreateFull",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFullInterceptors() ?? []
    )
  }

  /// 部分退款
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createPart(
    _ request: Order_V1_PartRefundApiCreate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Order_V1_PartRefundApiCreate, Order_V1_Refund> {
    return self.makeUnaryCall(
      path: "/order.v1.RefundService/CreatePart",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePartInterceptors() ?? []
    )
  }

  /// 退款id/订单id获取退款信息
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func list(
    _ request: Order_V1_RefundApiList,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Order_V1_RefundApiList, Order_V1_RefundList> {
    return self.makeUnaryCall(
      path: "/order.v1.RefundService/List",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  /// 退款审核接口
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAudit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAudit(
    _ request: Order_V1_AuditApiCreate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Order_V1_AuditApiCreate, Order_V1_Audit> {
    return self.makeUnaryCall(
      path: "/order.v1.RefundService/CreateAudit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAuditInterceptors() ?? []
    )
  }

  /// 获取退款原因列表
  ///
  /// - Parameters:
  ///   - request: Request to send to ReasonList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func reasonList(
    _ request: Order_V1_ReasonApi,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Order_V1_ReasonApi, Order_V1_Reasons> {
    return self.makeUnaryCall(
      path: "/order.v1.RefundService/ReasonList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReasonListInterceptors() ?? []
    )
  }
}

public protocol Order_V1_RefundServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createFull'.
  func makeCreateFullInterceptors() -> [ClientInterceptor<Order_V1_FullRefundApiCreate, Order_V1_Refund>]

  /// - Returns: Interceptors to use when invoking 'createPart'.
  func makeCreatePartInterceptors() -> [ClientInterceptor<Order_V1_PartRefundApiCreate, Order_V1_Refund>]

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<Order_V1_RefundApiList, Order_V1_RefundList>]

  /// - Returns: Interceptors to use when invoking 'createAudit'.
  func makeCreateAuditInterceptors() -> [ClientInterceptor<Order_V1_AuditApiCreate, Order_V1_Audit>]

  /// - Returns: Interceptors to use when invoking 'reasonList'.
  func makeReasonListInterceptors() -> [ClientInterceptor<Order_V1_ReasonApi, Order_V1_Reasons>]
}

public final class Order_V1_RefundServiceClient: Order_V1_RefundServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Order_V1_RefundServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the order.v1.RefundService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Order_V1_RefundServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Order_V1_RefundServiceProvider: CallHandlerProvider {
  var interceptors: Order_V1_RefundServiceServerInterceptorFactoryProtocol? { get }

  /// 全额退款
  func createFull(request: Order_V1_FullRefundApiCreate, context: StatusOnlyCallContext) -> EventLoopFuture<Order_V1_Refund>

  /// 部分退款
  func createPart(request: Order_V1_PartRefundApiCreate, context: StatusOnlyCallContext) -> EventLoopFuture<Order_V1_Refund>

  /// 退款id/订单id获取退款信息
  func list(request: Order_V1_RefundApiList, context: StatusOnlyCallContext) -> EventLoopFuture<Order_V1_RefundList>

  /// 退款审核接口
  func createAudit(request: Order_V1_AuditApiCreate, context: StatusOnlyCallContext) -> EventLoopFuture<Order_V1_Audit>

  /// 获取退款原因列表
  func reasonList(request: Order_V1_ReasonApi, context: StatusOnlyCallContext) -> EventLoopFuture<Order_V1_Reasons>
}

extension Order_V1_RefundServiceProvider {
  public var serviceName: Substring { return "order.v1.RefundService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateFull":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_V1_FullRefundApiCreate>(),
        responseSerializer: ProtobufSerializer<Order_V1_Refund>(),
        interceptors: self.interceptors?.makeCreateFullInterceptors() ?? [],
        userFunction: self.createFull(request:context:)
      )

    case "CreatePart":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_V1_PartRefundApiCreate>(),
        responseSerializer: ProtobufSerializer<Order_V1_Refund>(),
        interceptors: self.interceptors?.makeCreatePartInterceptors() ?? [],
        userFunction: self.createPart(request:context:)
      )

    case "List":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_V1_RefundApiList>(),
        responseSerializer: ProtobufSerializer<Order_V1_RefundList>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        userFunction: self.list(request:context:)
      )

    case "CreateAudit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_V1_AuditApiCreate>(),
        responseSerializer: ProtobufSerializer<Order_V1_Audit>(),
        interceptors: self.interceptors?.makeCreateAuditInterceptors() ?? [],
        userFunction: self.createAudit(request:context:)
      )

    case "ReasonList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_V1_ReasonApi>(),
        responseSerializer: ProtobufSerializer<Order_V1_Reasons>(),
        interceptors: self.interceptors?.makeReasonListInterceptors() ?? [],
        userFunction: self.reasonList(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Order_V1_RefundServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createFull'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFullInterceptors() -> [ServerInterceptor<Order_V1_FullRefundApiCreate, Order_V1_Refund>]

  /// - Returns: Interceptors to use when handling 'createPart'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePartInterceptors() -> [ServerInterceptor<Order_V1_PartRefundApiCreate, Order_V1_Refund>]

  /// - Returns: Interceptors to use when handling 'list'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInterceptors() -> [ServerInterceptor<Order_V1_RefundApiList, Order_V1_RefundList>]

  /// - Returns: Interceptors to use when handling 'createAudit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAuditInterceptors() -> [ServerInterceptor<Order_V1_AuditApiCreate, Order_V1_Audit>]

  /// - Returns: Interceptors to use when handling 'reasonList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReasonListInterceptors() -> [ServerInterceptor<Order_V1_ReasonApi, Order_V1_Reasons>]
}
