//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: helloworld.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Helloworld_HelloServerClient`, then call methods of this protocol to make API calls.
internal protocol Helloworld_HelloServerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Helloworld_HelloServerClientInterceptorFactoryProtocol? { get }

  func hello(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloResponse>

  func test(
    _ request: Helloworld_TestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_TestRequest, Helloworld_HelloResponse>

  func upload(
    _ request: Helloworld_UploadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_UploadRequest, Helloworld_HelloResponse>
}

extension Helloworld_HelloServerClientProtocol {
  internal var serviceName: String {
    return "helloworld.HelloServer"
  }

  /// Unary call to Hello
  ///
  /// - Parameters:
  ///   - request: Request to send to Hello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hello(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloResponse> {
    return self.makeUnaryCall(
      path: "/helloworld.HelloServer/Hello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }

  /// Unary call to Test
  ///
  /// - Parameters:
  ///   - request: Request to send to Test.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func test(
    _ request: Helloworld_TestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_TestRequest, Helloworld_HelloResponse> {
    return self.makeUnaryCall(
      path: "/helloworld.HelloServer/Test",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTestInterceptors() ?? []
    )
  }

  /// Unary call to Upload
  ///
  /// - Parameters:
  ///   - request: Request to send to Upload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upload(
    _ request: Helloworld_UploadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_UploadRequest, Helloworld_HelloResponse> {
    return self.makeUnaryCall(
      path: "/helloworld.HelloServer/Upload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadInterceptors() ?? []
    )
  }
}

internal protocol Helloworld_HelloServerClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'hello'.
  func makeHelloInterceptors() -> [ClientInterceptor<Helloworld_HelloRequest, Helloworld_HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'test'.
  func makeTestInterceptors() -> [ClientInterceptor<Helloworld_TestRequest, Helloworld_HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'upload'.
  func makeUploadInterceptors() -> [ClientInterceptor<Helloworld_UploadRequest, Helloworld_HelloResponse>]
}

internal final class Helloworld_HelloServerClient: Helloworld_HelloServerClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Helloworld_HelloServerClientInterceptorFactoryProtocol?

  /// Creates a client for the helloworld.HelloServer service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Helloworld_HelloServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

